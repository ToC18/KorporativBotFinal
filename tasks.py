import asyncio
import os
import logging

from aiogram import Bot
from aiogram.client.default import DefaultBotProperties  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from worker import celery_app
from database.main import async_session
from database.models import Poll
from database import crud

logger = logging.getLogger(__name__)
BOT_TOKEN = os.getenv("BOT_TOKEN")


@celery_app.task
def notify_users_about_new_poll(poll_id: int):
    logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ–ø—Ä–æ—Å–µ ID: {poll_id}")
    asyncio.run(send_notifications(poll_id))


async def send_notifications(poll_id: int):
    if not BOT_TOKEN:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –∑–∞–¥–∞—á–µ —Ä–∞—Å—Å—ã–ª–∫–∏. –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    poll_title = ""
    users_to_notify = []

    async with async_session() as session:
        poll = await session.get(Poll, poll_id)
        if not poll:
            logger.error(f"–û–ø—Ä–æ—Å ID {poll_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await bot.session.close()
            return
        poll_title = poll.title
        users_to_notify = await crud.get_all_users(session)

    if not users_to_notify:
        logger.warning("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        await bot.session.close()
        return

    logger.info(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –æ–ø—Ä–æ—Å—É '{poll_title}' –¥–ª—è {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üôã‚Äç‚ôÇÔ∏è –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data=f"poll_{poll_id}")]
    ])

    successful_sends = 0
    failed_sends = 0

    for user in users_to_notify:
        try:
            await bot.send_message(
                chat_id=user.user_tg_id,
                text=f"üì¢ <b>–ù–æ–≤—ã–π –æ–ø—Ä–æ—Å!</b>\n\n- <i>{poll_title}</i>\n\n–ü—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ, –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ!",
                reply_markup=keyboard
            )
            successful_sends += 1
            await asyncio.sleep(0.1)
        except (TelegramBadRequest, TelegramForbiddenError) as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_tg_id}: {e}")
            failed_sends += 1
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_tg_id}: {e}")
            failed_sends += 1

    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful_sends}, –û—à–∏–±–æ–∫: {failed_sends}")
    await bot.session.close()


@celery_app.task
def broadcast_message_task(message_text: str):
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.")
    asyncio.run(send_broadcast(message_text))


async def send_broadcast(message_text: str):
    if not BOT_TOKEN:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –∑–∞–¥–∞—á–µ —Ä–∞—Å—Å—ã–ª–∫–∏. –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    users_to_notify = []

    async with async_session() as session:
        users_to_notify = await crud.get_all_users(session)

    if not users_to_notify:
        logger.warning("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        await bot.session.close()
        return

    logger.info(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    successful_sends = 0
    failed_sends = 0

    for user in users_to_notify:
        try:
            await bot.send_message(chat_id=user.user_tg_id, text=message_text)
            successful_sends += 1
            await asyncio.sleep(0.1)
        except (TelegramBadRequest, TelegramForbiddenError) as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_tg_id}: {e}")
            failed_sends += 1
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_tg_id}: {e}")
            failed_sends += 1

    logger.info(f"–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful_sends}, –û—à–∏–±–æ–∫: {failed_sends}")
    await bot.session.close()
services:
  db:
    image: postgres:15-alpine
    container_name: korpbot_postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: korpbot_redis
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  bot:
    build: .
    container_name: korpbot_telegram_bot
    restart: always
    command: python main.py
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - BOT_TOKEN=${BOT_TOKEN}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ADMIN_IDS=${ADMIN_IDS}
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  api:
    build: .
    container_name: korpbot_fastapi_api
    restart: always
    command: uvicorn app:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - ADMIN_IDS=${ADMIN_IDS}
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy

  worker:
    build: .
    container_name: korpbot_celery_worker
    restart: always
    command: celery -A worker.celery_app worker -l info
    environment:
      - DATABASE_URL=postgresql+asyncpg://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - BOT_TOKEN=${BOT_TOKEN}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # Добавлено для консистентности
      - ADMIN_IDS=${ADMIN_IDS}
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy


volumes:
  postgres_data: